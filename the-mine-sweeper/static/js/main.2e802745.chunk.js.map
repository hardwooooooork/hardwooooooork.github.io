{"version":3,"sources":["components/SetField/SetFieldLayout.jsx","components/SetField/FindResultLayout.jsx","components/SetField/index.jsx","components/Rooot.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SetFieldLayout","props","fieldset","react_default","a","createElement","id","getTotalMineNum","className","map","o","key","onClick","onClickHandeler","findMine","disabled","maxMineNum","FindResultLayout","resultset","concat","resetField","SetField","Layout","this","resultFlag","Component","ROW","COL","Rooot","state","Array","fill","_this","setState","_this$state","filter","length","item","temp_result","findMineEast","findMineNorth","findMineSouth","findMineWest","findMineNorthEast","findMineNorthWest","findMineSouthEast","findMineSouthWest","error","console","log","components_SetField_SetField","Object","assign","App","Rooot_Rooot","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e802745.chunk.js","sourcesContent":["import React from 'react'\nimport './SetField.css'\n\nexport default function SetFieldLayout(props) {\n    const { fieldset } = props;\n    return (\n        <div id=\"SetField\">\n            <h1>지뢰를 선택하세요.</h1>\n            <p>현재 지뢰수 : {props.getTotalMineNum()}</p>\n            <div className=\"form-wrap\">\n                <div className=\"mine-field\">\n                    {fieldset.map((o, key) => \n                    <div className=\"mine\" key={key}>\n                        <label \n                            className={o ? \"is-mine\" : \"not-mine\"}\n                                onClick={() => props.onClickHandeler(key)}\n                            />\n                    </div>)}\n                </div>\n            </div>\n            <div className=\"btn-area\">\n                <button\n                    onClick={props.findMine}\n                    disabled={(props.getTotalMineNum() < props.maxMineNum) }\n                >\n                    Find mine\n                </button>\n            </div>\n        </div>\n        \n    )\n}\n","import React from 'react'\nimport './SetField.css'\n\nexport default function FindResultLayout(props) {\n    const { resultset, fieldset} = props;\n    return (\n        <div id=\"SetField\">\n            <h1>지뢰 찾기</h1>\n            <p>계산 결과</p>\n            <div className=\"form-wrap\">\n                <div className=\"mine-field\">\n                    {resultset.map((o, key) =>\n                        <div className=\"mine\" key={key}>\n                            <label\n                                className={\n                                    ((o >= 0) ? `find-mine-${o}` : \"is-mine\")+ \n                                        ((fieldset[key]) ? \" this-is-mine\" : \"\")\n                                }\n                            />\n                        </div>)}\n                </div>\n            </div>\n            <div className=\"btn-area\">\n                <button\n                    onClick={props.resetField}\n                >\n                    Reset\n                </button>\n            </div>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport SetFieldLayout from './SetFieldLayout'\nimport FindResultLayout from './FindResultLayout';\n\n\nexport default class SetField extends Component {\n    render() {\n        const { resultFlag } = this.props;\n\n        //console.log(resultFlag);\n        \n        const Layout = (resultFlag)? FindResultLayout : SetFieldLayout;\n\n        return (\n            <Layout\n                {...this.props}\n            />\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport SetField from './SetField' \n\nconst ROW = 10;\nconst COL = 10;\n\nexport default class Rooot extends Component {\n    state={\n        fieldset: new Array(ROW * COL).fill(false),\n        resultset: new Array(ROW * COL).fill(0),\n        resultFlag: false,\n        maxMineNum: 10,\n    }\n/**\n * 클릭시 이벤트 메서드 (초기화)\n */\n    resetField= ()=>{\n        const fieldset=  new Array(ROW * COL).fill(false);\n        const resultset= new Array(ROW * COL).fill(0);\n        const resultFlag = false;\n        this.setState({\n            fieldset, resultset, resultFlag\n        })\n    }\n\n/**\n * 클릭시 이벤트 메서드 (계산)\n */\n    onClickHandeler = (key)=> {\n        let { fieldset, maxMineNum } = this.state\n        if (  \n            ((fieldset[key] === false) && (maxMineNum >= (fieldset.filter(o => o).length + 1))) ||\n            ((fieldset[key] === true) && (maxMineNum >= (fieldset.filter(o => o).length )))\n        ){\n            fieldset[key] = !fieldset[key];\n            this.setState(fieldset);\n        }\n    }\n\n/**\n * 총 지뢰 갯수 계산메서드\n */\n    getTotalMineNum = () => {\n        let { fieldset} = this.state\n        const minenum = fieldset.filter(o => o).length\n        return minenum\n    }\n\n\n\n/**\n * 전체 지뢰 탐색메서드\n */\n/*\n        다음 자신주변의 쉘주변에 지뢰를 탐색\n\n            N.W   N   N.E\n              \\   |   /\n               \\  |  /\n            W----Cell----E\n                 / | \\\n               /   |  \\\n            S.W    S   S.E\n\n        Cell-->Current Cell \n        N -->  North        \n        S -->  South        \n        E -->  East         \n        W -->  West         \n        N.E--> North-East   \n        N.W--> North-West   \n        S.E--> South-East   \n        S.W--> South-West   \n*/\n    findMine = ()=>{\n        const { fieldset } = this.state;\n        // 순차적으로 탐색\n        const resultset = fieldset.map((item,key)=>{\n            let temp_result = 0;\n            if (this.findMineEast(key)) {\n                temp_result += this.findMineEast(key);\n            }\n            if (this.findMineNorth(key)) {\n                temp_result += this.findMineNorth(key);\n            }\n            if (this.findMineSouth(key)) {\n                temp_result += this.findMineSouth(key);\n            }\n            if (this.findMineWest(key)) {\n                temp_result += this.findMineWest(key);\n            }\n            if (this.findMineNorthEast(key)) {\n                temp_result += this.findMineNorthEast(key);\n            }\n            if (this.findMineNorthWest(key)) {\n                temp_result += this.findMineNorthWest(key);\n            }\n            if (this.findMineSouthEast(key)) {\n                temp_result += this.findMineSouthEast(key);\n            }\n            if (this.findMineSouthWest(key)) {\n                temp_result += this.findMineSouthWest(key);\n            }\n            return temp_result;\n        })\n        //console.log(resultset);\n        const resultFlag = true;\n        this.setState({ resultset, resultFlag});\n    }\n\n\n\n/**\n * 현재 위치를 기준으로 상단에 지뢰가 있는지 확인\n */\n    findMineNorth = ( key )=>{\n        const { fieldset } = this.state\n        // if( fieldset[key] === true ) return false;\n        if( key < COL ) return false;\n        try {\n            return fieldset[key - COL ] ? 1 : 0;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n/**\n * 현재 위치를 기준으로 하단에 지뢰가 있는지 확인\n */\n    findMineSouth = (key) => {\n        const { fieldset } = this.state\n        // if (fieldset[key] === true) return false;\n        if (key >= (ROW-1) * COL ) return false;\n        try {\n            return fieldset[key + COL] ? 1 : 0;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n/**\n * 현재 위치를 기준으로 우측에 지뢰가 있는지 확인\n */\n    findMineEast = (key) => {\n        const { fieldset } = this.state\n        // if (fieldset[key] === true) return false;\n        if ( key % COL === ( COL - 1 ) ) return false;\n        try {\n            return fieldset[key + 1] ? 1 : 0;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n/**\n * 현재 위치를 기준으로 좌측에 지뢰가 있는지 확인\n */\n    findMineWest = (key) => {\n        const { fieldset } = this.state\n        // if (fieldset[key] === true) return false;\n        if (key % COL === 0) return false;\n        try {\n            return fieldset[key - 1] ? 1 : 0;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n/**\n * 현재 위치를 기준으로 우측상단에 지뢰가 있는지 확인\n */\n    findMineNorthEast = (key) => {\n        const { fieldset } = this.state\n        // if (fieldset[key] === true) return false;\n        if (key % COL === (COL - 1) || key < COL) return false;\n        try {\n            return fieldset[key - (COL - 1)] ? 1 : 0;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n/**\n * 현재 위치를 기준으로 좌측상단에 지뢰가 있는지 확인\n */\n    findMineNorthWest = (key) => {\n        const { fieldset } = this.state\n        // if (fieldset[key] === true) return false;\n        if (key % COL === 0 || key < COL) return false;\n        try {\n            return fieldset[key - (COL + 1)] ? 1 : 0;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n/**\n * 현재 위치를 기준으로 우측하단에 지뢰가 있는지 확인\n */\n    findMineSouthEast = (key) => {\n        const { fieldset } = this.state\n        // if (fieldset[key] === true) return false;\n        if (key % COL === (COL - 1) || key >= (ROW-1) * COL) return false;\n        try {\n            return fieldset[key + (COL + 1)] ? 1 : 0;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    \n/**\n * 현재 위치를 기준으로 좌측하단에 지뢰가 있는지 확인\n */\n    findMineSouthWest = (key) => {\n        const { fieldset } = this.state\n        // if (fieldset[key] === true) return false;\n        if (key % COL === 0  || key >= (ROW - 1) * COL) return false;\n        try {\n            return fieldset[key + (COL - 1)] ? 1 : 0;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n/**\n * \n */\n    render() {\n        return (\n            <SetField \n                onClickHandeler={this.onClickHandeler}\n                getTotalMineNum={this.getTotalMineNum}\n                findMine={this.findMine}\n                resetField={this.resetField}\n                {...this.state}\n            />\n            \n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Root from './components/Rooot'\n\nfunction App() {\n  return (\n    <Root/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}